
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import ast.AST;
import ast.Number;
import ast.Identifier;
import ast.Operator;
import ast.CondOperator;
import interpreter.Interpreter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\013\002" +
    "\000\002\004\005\000\002\014\002\000\002\004\005\000" +
    "\002\015\002\000\002\004\005\000\002\016\002\000\002" +
    "\004\005\000\002\004\003\000\002\004\003\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\005\005\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\006\000\002\005\006\000\002\006" +
    "\005\000\002\007\006\000\002\010\006\000\002\011\006" +
    "\000\002\011\010\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\032\003\025\006\023\013\012\016\005\017" +
    "\006\021\024\022\004\023\014\025\011\034\020\035\022" +
    "\036\015\001\002\000\004\013\115\001\002\000\004\013" +
    "\112\001\002\000\004\013\107\001\002\000\004\004\ufffa" +
    "\001\002\000\020\004\ufffc\005\035\006\037\007\041\010" +
    "\040\011\033\015\036\001\002\000\020\006\023\013\012" +
    "\016\005\017\006\034\020\035\022\036\031\001\002\000" +
    "\020\006\023\013\012\016\005\017\006\034\020\035\022" +
    "\036\031\001\002\000\004\002\062\001\002\000\032\003" +
    "\025\006\023\013\012\016\005\017\006\021\024\022\004" +
    "\023\014\025\011\034\020\035\022\036\015\001\002\000" +
    "\022\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\015\uffea\020\056\001\002\000\034\002\001\003\025\006" +
    "\023\013\012\016\005\017\006\021\024\022\004\023\014" +
    "\025\011\034\020\035\022\036\015\001\002\000\004\004" +
    "\ufff8\001\002\000\034\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\014\uffe9\015\uffe9\026\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\001\002\000\004\004\ufff6\001\002" +
    "\000\034\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\014\uffe8\015\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\001\002\000\020\006\023\013\012\016\005\017" +
    "\006\034\020\035\022\036\031\001\002\000\004\013\030" +
    "\001\002\000\040\002\ufff3\003\ufff3\006\ufff3\013\ufff3\016" +
    "\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\027\ufff3\034\ufff3\035\ufff3\036\ufff3\001\002\000\040\002" +
    "\ufff4\003\ufff4\006\ufff4\013\ufff4\016\ufff4\017\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\025\ufff4\027\ufff4\034\ufff4\035" +
    "\ufff4\036\ufff4\001\002\000\036\002\ufffe\003\ufffe\006\ufffe" +
    "\013\ufffe\016\ufffe\017\ufffe\021\ufffe\022\ufffe\023\ufffe\024" +
    "\ufffe\025\ufffe\034\ufffe\035\ufffe\036\ufffe\001\002\000\020" +
    "\006\023\013\012\016\005\017\006\034\020\035\022\036" +
    "\031\001\002\000\034\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\014\uffea\015\uffea\026\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\001\002\000\020\005\035\006\037" +
    "\007\041\010\040\011\033\014\034\015\036\001\002\000" +
    "\020\006\023\013\012\016\005\017\006\034\020\035\022" +
    "\036\031\001\002\000\004\004\uffe3\001\002\000\020\006" +
    "\023\013\012\016\005\017\006\034\020\035\022\036\031" +
    "\001\002\000\020\006\023\013\012\016\005\017\006\034" +
    "\020\035\022\036\031\001\002\000\020\006\023\013\012" +
    "\016\005\017\006\034\020\035\022\036\031\001\002\000" +
    "\020\006\023\013\012\016\005\017\006\034\020\035\022" +
    "\036\031\001\002\000\020\006\023\013\012\016\005\017" +
    "\006\034\020\035\022\036\031\001\002\000\034\004\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\014\ufff0\015" +
    "\036\026\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\001\002" +
    "\000\034\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011" +
    "\uffef\014\uffef\015\036\026\uffef\030\uffef\031\uffef\032\uffef" +
    "\033\uffef\001\002\000\034\004\ufff1\005\ufff1\006\ufff1\007" +
    "\041\010\040\011\033\014\ufff1\015\036\026\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\001\002\000\034\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\014\uffed\015\036" +
    "\026\uffed\030\uffed\031\uffed\032\uffed\033\uffed\001\002\000" +
    "\034\004\ufff2\005\ufff2\006\ufff2\007\041\010\040\011\033" +
    "\014\ufff2\015\036\026\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\001\002\000\034\004\uffee\005\uffee\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\014\uffee\015\036\026\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\001\002\000\034\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\014\uffec\015\uffec\026" +
    "\uffec\030\uffec\031\uffec\032\uffec\033\uffec\001\002\000\004" +
    "\004\052\001\002\000\040\002\ufff5\003\ufff5\006\ufff5\013" +
    "\ufff5\016\ufff5\017\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\027\ufff5\034\ufff5\035\ufff5\036\ufff5\001\002\000" +
    "\004\004\054\001\002\000\040\002\ufff7\003\ufff7\006\ufff7" +
    "\013\ufff7\016\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\027\ufff7\034\ufff7\035\ufff7\036\ufff7\001\002" +
    "\000\036\002\uffff\003\uffff\006\uffff\013\uffff\016\uffff\017" +
    "\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\034\uffff" +
    "\035\uffff\036\uffff\001\002\000\020\006\023\013\012\016" +
    "\005\017\006\034\020\035\022\036\031\001\002\000\020" +
    "\004\uffe5\005\035\006\037\007\041\010\040\011\033\015" +
    "\036\001\002\000\034\003\025\006\023\013\012\016\005" +
    "\017\006\021\024\022\004\023\014\024\061\025\011\034" +
    "\020\035\022\036\015\001\002\000\040\002\ufffd\003\ufffd" +
    "\006\ufffd\013\ufffd\016\ufffd\017\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\025\ufffd\027\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\001\002\000\004\002\000\001\002\000\020\005\035\006" +
    "\037\007\041\010\040\011\033\014\064\015\036\001\002" +
    "\000\034\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\014\uffeb\015\uffeb\026\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\001\002\000\006\026\076\033\075\001\002\000" +
    "\024\005\035\006\037\007\041\010\040\011\033\015\036" +
    "\030\070\031\067\032\071\001\002\000\020\006\023\013" +
    "\012\016\005\017\006\034\020\035\022\036\031\001\002" +
    "\000\020\006\023\013\012\016\005\017\006\034\020\035" +
    "\022\036\031\001\002\000\020\006\023\013\012\016\005" +
    "\017\006\034\020\035\022\036\031\001\002\000\022\005" +
    "\035\006\037\007\041\010\040\011\033\015\036\026\uffde" +
    "\033\uffde\001\002\000\022\005\035\006\037\007\041\010" +
    "\040\011\033\015\036\026\uffe0\033\uffe0\001\002\000\022" +
    "\005\035\006\037\007\041\010\040\011\033\015\036\026" +
    "\uffdf\033\uffdf\001\002\000\020\006\023\013\012\016\005" +
    "\017\006\034\020\035\022\036\031\001\002\000\032\003" +
    "\025\006\023\013\012\016\005\017\006\021\024\022\004" +
    "\023\014\025\011\034\020\035\022\036\015\001\002\000" +
    "\040\002\uffe2\003\uffe2\006\uffe2\013\uffe2\016\uffe2\017\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\027\100\034" +
    "\uffe2\035\uffe2\036\uffe2\001\002\000\032\003\025\006\023" +
    "\013\012\016\005\017\006\021\024\022\004\023\014\025" +
    "\011\034\020\035\022\036\015\001\002\000\040\002\uffe1" +
    "\003\uffe1\006\uffe1\013\uffe1\016\uffe1\017\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\001\002\000\006\026\uffdd\033\uffdd\001\002\000" +
    "\004\004\104\001\002\000\040\002\ufffb\003\ufffb\006\ufffb" +
    "\013\ufffb\016\ufffb\017\ufffb\021\ufffb\022\ufffb\023\ufffb\024" +
    "\ufffb\025\ufffb\027\ufffb\034\ufffb\035\ufffb\036\ufffb\001\002" +
    "\000\004\004\106\001\002\000\040\002\ufff9\003\ufff9\006" +
    "\ufff9\013\ufff9\016\ufff9\017\ufff9\021\ufff9\022\ufff9\023\ufff9" +
    "\024\ufff9\025\ufff9\027\ufff9\034\ufff9\035\ufff9\036\ufff9\001" +
    "\002\000\020\006\023\013\012\016\005\017\006\034\020" +
    "\035\022\036\031\001\002\000\020\005\035\006\037\007" +
    "\041\010\040\011\033\014\111\015\036\001\002\000\034" +
    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\014" +
    "\uffe6\015\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\001\002\000\020\006\023\013\012\016\005\017\006\034" +
    "\020\035\022\036\031\001\002\000\020\005\035\006\037" +
    "\007\041\010\040\011\033\014\114\015\036\001\002\000" +
    "\034\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\014\uffe7\015\uffe7\026\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\001\002\000\004\036\116\001\002\000\004\014\117" +
    "\001\002\000\004\004\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\022\002\012\003\015\004\026\005\007\006" +
    "\006\007\016\010\020\011\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\104\001" +
    "\001\000\004\013\102\001\001\000\006\005\065\012\064" +
    "\001\001\000\004\005\062\001\001\000\002\001\001\000" +
    "\020\003\057\004\026\005\007\006\006\007\016\010\020" +
    "\011\025\001\001\000\002\001\001\000\016\004\054\005" +
    "\007\006\006\007\016\010\020\011\025\001\001\000\004" +
    "\015\052\001\001\000\002\001\001\000\004\016\050\001" +
    "\001\000\002\001\001\000\004\005\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\046\001\001\000\002\001\001\000" +
    "\004\005\045\001\001\000\004\005\044\001\001\000\004" +
    "\005\043\001\001\000\004\005\042\001\001\000\004\005" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\056\001\001\000\002\001\001\000\016\004\054" +
    "\005\007\006\006\007\016\010\020\011\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\073\001\001\000\004\005\072\001\001\000\004\005\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\065\012\101\001\001\000\016\004\076" +
    "\005\007\006\006\007\016\010\020\011\025\001\001\000" +
    "\002\001\001\000\016\004\100\005\007\006\006\007\016" +
    "\010\020\011\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s) {
        System.err.println("Erro de sintaxe. Token inesperado: "
            + sym.terminalNames[s.sym] +". Linha: "
            + (s.left + 1) + ", Coluna: " + (s.right + 1));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.err.println("Erro sintático próximo ao símbolo: "
            + sym.terminalNames[s.sym] + ". Linha: "
            + (s.left + 1) + ", Coluna: " + (s.right + 1));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmt_list 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Interpreter.interpret(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt_list ::= stmt_list stmt 
            {
              AST RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST s1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST s2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = AST.create(s1, s2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_list ::= stmt 
            {
              AST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= LBRACE stmt_list RBRACE 
            {
              AST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              AST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= numerical_stmt NT$0 SEMI 
            {
              AST RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (AST) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              AST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= assignment_stmt NT$1 SEMI 
            {
              AST RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (AST) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              AST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= input_stmt NT$2 SEMI 
            {
              AST RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (AST) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              AST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= output_stmt NT$3 SEMI 
            {
              AST RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (AST) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= conditional_stmt 
            {
              AST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= error 
            {
              AST RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // numerical_stmt ::= numerical_stmt PLUS numerical_stmt 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Operator.create(sym.PLUS, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // numerical_stmt ::= numerical_stmt MINUS numerical_stmt 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Operator.create(sym.MINUS, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // numerical_stmt ::= numerical_stmt TIMES numerical_stmt 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Operator.create(sym.TIMES, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // numerical_stmt ::= numerical_stmt DIVIDE numerical_stmt 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Operator.create(sym.DIVIDE, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // numerical_stmt ::= numerical_stmt MOD numerical_stmt 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Operator.create(sym.MOD, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // numerical_stmt ::= numerical_stmt EXP numerical_stmt 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Operator.create(sym.EXP, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // numerical_stmt ::= MINUS numerical_stmt 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Operator.create(sym.UMINUS, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // numerical_stmt ::= LPAREN numerical_stmt RPAREN 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // numerical_stmt ::= ID 
            {
              AST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Identifier.create(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // numerical_stmt ::= NUMBER 
            {
              AST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Number.create(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // numerical_stmt ::= PI 
            {
              AST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Number.create(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // numerical_stmt ::= SIN LPAREN numerical_stmt RPAREN 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Operator.create(sym.SIN, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // numerical_stmt ::= COS LPAREN numerical_stmt RPAREN 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Operator.create(sym.COS, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // assignment_stmt ::= ID ASSIGN numerical_stmt 
            {
              AST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Operator.create(sym.ASSIGN, Identifier.create(id), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // input_stmt ::= READ LPAREN ID RPAREN 
            {
              AST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Operator.create(sym.READ, Identifier.create(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input_stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // output_stmt ::= PRINT LPAREN numerical_stmt RPAREN 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Operator.create(sym.PRINT, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output_stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // conditional_stmt ::= IF relational_stmt THEN stmt 
            {
              AST RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST r = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = CondOperator.create(sym.IF, r, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // conditional_stmt ::= IF relational_stmt THEN stmt ELSE stmt 
            {
              AST RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST r = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST s1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST s2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = CondOperator.create(sym.IF, r, s1, s2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // relational_stmt ::= numerical_stmt EQ numerical_stmt 
            {
              AST RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST n1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST n2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Operator.create( sym.EQ, n1, n2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // relational_stmt ::= numerical_stmt NEQ numerical_stmt 
            {
              AST RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST n1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST n2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Operator.create( sym.NEQ, n1, n2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // relational_stmt ::= numerical_stmt LT numerical_stmt 
            {
              AST RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST n1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST n2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Operator.create( sym.LT, n1, n2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // relational_stmt ::= relational_stmt AND relational_stmt 
            {
              AST RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST r1 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST r2 = (AST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Operator.create( sym.AND, r1, r2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
